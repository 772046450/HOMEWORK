#5-1
def factorial(n: int) -> int:
    if n > 0:
        return n * factorial(n - 1)
    else:
        return 1
if __name__ == '__main__':
    n = int(input('출력할 팩토리얼값을 입력하세요.: '))
    print(f'{n}의 팩토리얼은 {factorial(n)}입니다.')

#5-2
def gcd(x: int, y: int) -> int:
    if y == 0:
        return x
    else:
        return gcd(y, x%y)
if __name__=='__main__':
    print('두 정숫값의 최대 공약수를 구합니다.')
    x = int(input('첫 번째 정숫값을 입력하세요.: '))
    y = int(input('두 번째 정숫값을 입력하세요.: ')) 
    print(f'두 정숫값의 최대 공약수는 {gcd(x, y)}입니다.')

#5-3
def recur(n:int)->int:
    if n>0:
        recur(n-1)
        print(n)
        recur(n-2)

x=int(input('정숫값을 입력하십시오.:'))

recur(x)

#5-5
from stack import Stack

def recur(n:int)->int:
    s=Stack(n)

    while True:
        if n>0:
            s.push(n)
            n=n-1
            continue
        if not s.is_empty():
            n=s.pop()
            print(n)
            n=n-2
            continue
        break

x=int(input('정숫값을 입력하십시오.:'))
recur(x)


#5-6
def move(no: int, x: int, y: int) -> None:
    if no > 1:
        move(no - 1, x, 6 - x - y)

    print(f'원반 [{no}]을(를) {x}기등에서 {y}기둥으로 옮깁니다. ')
    if no > 1:
        move(no - 1, 6 - x - y, y)
print('하노이의 탑을 구현합니다.')
n = int(input('원반의 개수를 입력하세요.: '))
move(n, 1, 3)


#5-7
pos = [0] * 8
def put() -> None:
    """각 열에 배치한 퀸의 위치를 출력"""
    for i in range(8):
        print(f'{pos[i]:2}', end='')
    print()
def set(i: int) -> None:
    for j in range(8):
        pos[i] = j
        if i == 7:
            put()
        else:
            set(i+1)
set(0)


#5-9
pos = [0] * 8
flag_a = [False] * 8
flag_b = [False] * 15
flag_c = [False] * 15
def put() -> None:
    for i in range(8):
        print(f'{pos[i]:2}', end='')
    print()
def set(i: int) -> None:
    for j in range(8):
        if(     not flag_a[j]
            and not flag_b[i + j]
            and not flag_c[i - j + 7]):
            pos[i] = j
            if i == 7:
                put()
            else:
                flag_a[j] = flag_b[i + j] = flag_c[i - j + 7] = True
                set(i + 1)
                flag_a[j] = flag_b[i + j] = flag_c[i - j + 7] = False
set(0)

