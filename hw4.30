#12-01
class Car :
    color = ""
    speed = 0

    def upSpeed(self, value) :
        self.speed += value

    def downSpeed(self, value) :
        self.speed -= value



#12-02
## 클래스 선언 부분 ##
class Car :
    color =""
    speed = 0
    def upSpeed(self, value) :
        self.speed += value
    def downSpeed(self, value) :
        self.speed -= value
# 메인 코드 부분 #
myCar1 = Car()
myCar1.color = "빨강"
myCar1.speed = 0
myCar2 = Car()
myCar2.color = "파랑"
myCar2.speed = 0
myCar3 = Car()
myCar3.color = "노랑"
myCar3.speed = 0
myCar1.upSpeed(30)
print("자동차1의 색상은 %s이며, 현재 속도는 %dkm입니다." % (myCar1.color, myCar1.speed))
myCar2.upSpeed(60)
print("자동차2의 색상은 %s이메, 현재 속도는 %dkm입니다." % (myCar2.color, myCar2.speed))
myCar3.upSpeed(0)
print("자동차3의 색상은 %s이며, 현재 속도는 %dkm입니다." % (myCar3.color, myCar3.speed))


#12-03
## 클래스 선언 부분 ##
class Car :
    color = ""
    speed = 0
   
    def __init__(self) :
        self.color = "빨강"
        self.speed = 0
    def upSpeed(self, value) :
        self.speed += value
    def downSpeed(self, value) :
        self.speed -= value

 ## 메인 코드 부분 ##
myCar1 = Car()
myCar2 = Car()
print("자동차1의 색상은 %s 이며, 현재 속도는 %dkm입니다." % (myCar1.color, myCar1.speed))
print("자동차2의 색상은 %s 이며, 현재 속도는 %dkm입니다." % (myCar2.color, myCar2.speed))

#12-04
## 클래스 선언 부분 ##
class Car :
    color = ""
    speed = 0

    def __init__ (self, value1, value2):
        self.color = value1
        self.speed = value2

## 메인 코드 부분 ##
myCar1 = Car("빨강", 30)
myCar2 = Car("파랑", 60)

#12-05
## 클래스 선언 부분 #
class Car :
    name = ""
    speed = 0
    def __init__(self, name, speed) :
        self.name = name
        self.speed = speed
    def getName(self) :
        return self.name
    def getSpeed(self) :
        return self.speed
## 변수 선언 부분 ##
car1, car2 = None, None
## 메인 코드 부분 ##
car1 = Car("아우디",0)
car2 = Car("벤츠", 30)
print("%s의 현재 속도는 %d입니다." %(car1.getName(), car1.getSpeed()))
print("%s의 현재 속도는 %d입니다." %(car2.getName(), car2.getSpeed()))

#12-06
## 클래스 선언 부분 ##
class Car :
    color = ""
    speed = 0
    count = 0
    def __init_(self):
        speed = 0
        Car.count += 1
## 변수 선언 부분 ##
myCar1, myCar2 = None, None
## 메인 코드 부분 ##
myCar1 = Car()
myCar1.speed = 30
print("자동차1의 현재 속도는 %dkm, 생산된 자동차는 총 %d대입니다." % (myCar1.speed, Car.count))
myCar2 = Car()
myCar2.speed= 60
print("자동차2의 현재 속도는 %dkm, 생산된 자동차는 총 %d대입니다." % (myCar2.speed, myCar2.count))

#12-08
import turtle
import random
## 클래스 선언 부분 ##
class Shape :
    myTurtle = None
    cx, cy = 0,0
    
    def__init__(self):
        self.myTurtle = turtle.Turtle('turtle')
        
    def setPen(self) :
        r = random.random()
        g = random.random()
        b = random.random()
        self.myTurtle.pencolor((r, g, b))
        pSize =random.randrange(1,10)
        self.myTurtle.pensize(pSize)
        def drawShape(self) :
            pass
class Rectangle(Shape):
    width, height = [0] * 2       
    def __init_ (self, x, y) :
        Shape .__init__(self)
        self.cx = X
        self.cy = y
        self.width = random.randrange(20, 100)
        self.height = random.randrange(20, 100)
    def drawShape(self) :
        sx1, sy1, sx2, sy2 = [0] * 4
        sx1 = self.cx - self.width /2
        sy1 = self.cy - self.height / 2
        sx2 = self.cx + self.width / 2
        sy2 = self.cy + self.height / 2
        self.setPen()
        self.myTurtle.penup()
        self.myTurtle.goto(sx1,sy1)
        self.myTurtle.pendown()
        self.myTurtle.goto(sx1,sy2)
        self.myTurtle.goto(sx2, sy2)
        self.myTurtle.goto(sx2, sy1)
        self.myTurtle.goto(sx1, sy1)
def screenLeftClick(x, y) :
    rect II Rectangle(x,y)
    rect.drawShape()
turtle.title('거북이로 객체지향 사각형 그리기')
turtle.onscreenclick(screenLeftClick, 1)
turtle.done()

#12-10
class SuperClass :
    def method(self) :
        pass
class SubClass1 (SuperClass):
    def method(self) :
        print('SubClass1에서 method()를 오버라어딩함')
class SubClass2 (SuperClass) :
    pass
sub1 = SubClass1()
sub2 = SubClass2()
sub1.method()
sub2.method()

#12-12
import threading
import time
class RacingCar :
    
car1 = RacingCar('@자동차1')
car2 = RacingCar('#자동차2')
car3 = RacingCar('$자동차3')
th1 = threading.Thread(target = car1.runCar)
th2 = threading.Thread(target = car2.runCar)
th3 = threading.Thread(target = car3.runCar)
th1.start()
th2.start()
th3.start()

